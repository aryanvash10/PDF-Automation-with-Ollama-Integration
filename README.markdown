# PDF Similarity Comparison with Ollama

This project provides Python scripts to generate test PDFs and compare them using **Jaccard Similarity** (based on tokenized text) and **Cosine Similarity** (based on text embeddings generated by an Ollama model). It is designed to handle large PDFs (300–400+ pages) and is optimized for deployment in a professional environment.

## Features
- **Generate Test PDFs**: Use `createpdf.py` to create test PDF files for similarity comparison.
- **Compare PDFs**: Use `ollama_pdf_similarity_v3.py` to extract text from PDFs with PyMuPDF, compute Jaccard Similarity, and generate embeddings with the `phi:latest` Ollama model for Cosine Similarity.
- Handles large PDFs with text truncation to prevent memory issues.
- Includes robust error handling for missing models or server issues.

## Prerequisites
Before running the scripts, ensure the following are installed on your system:
- **Python 3.8+** (tested with Python 3 in a virtual environment).
- **Ollama** (for generating text embeddings in `ollama_pdf_similarity_v3.py`).
- PDF files (either generated by `createpdf.py` or existing files, e.g., `E:\PDFmuTutorial\large1.pdf` and `large2.pdf`).

## Installation

1. **Clone the Repository** (if hosted on GitHub):
   ```bash
   git clone <your-repo-url>
   cd <repo-name>
   ```

2. **Set Up a Virtual Environment** (recommended):
   ```bash
   python -m venv .venv
   ```
   - On Windows:
     ```bash
     .venv\Scripts\activate
     ```
   - On macOS/Linux:
     ```bash
     source .venv/bin/activate
     ```

3. **Install Python Dependencies**:
   Install the required packages using `pip`:
   ```bash
   pip install pymupdf==1.24.7 PyMuPDFb==1.24.6 numpy ollama
   ```
   - `pymupdf==1.24.7` and `PyMuPDFb==1.24.6`: For PDF text extraction and creation.
   - `numpy`: For Cosine Similarity calculations.
   - `ollama`: For interfacing with the Ollama model.

4. **Install Ollama** (for `ollama_pdf_similarity_v3.py`):
   - Download and install Ollama from [https://ollama.com/download](https://ollama.com/download).
   - Verify installation:
     ```bash
     ollama --version
     ```
   - Pull the `phi:latest` model (lightweight, 1.6 GB):
     ```bash
     ollama pull phi:latest
     ```

5. **Start the Ollama Server**:
   - Before running `ollama_pdf_similarity_v3.py`, start the Ollama server in a separate terminal:
     ```bash
     ollama serve
     ```
   - Keep the server running while executing the script.

## Usage

### 1. Generate Test PDFs
Use `createpdf.py` to create test PDFs for similarity comparison.
- **Run the Script**:
  ```bash
  & E:/PDFmuTutorial/.venv/Scripts/python.exe E:/PDFmuTutorial/createpdf.py
  ```
- **Output**:
  - Creates test PDFs (e.g., `large1.pdf`, `large2.pdf`) in `E:\PDFmuTutorial`.
  - Adjust parameters in `createpdf.py` (e.g., page count, content) to generate PDFs with specific characteristics (see script for details).
- **Note**: Ensure you have write permissions in `E:\PDFmuTutorial` for saving generated PDFs.

### 2. Compare PDFs
Use `ollama_pdf_similarity_v3.py` to compare two PDFs.
- **Update PDF Paths**:
  Edit `pdf1_path` and `pdf2_path` in `ollama_pdf_similarity_v3.py` to point to your PDFs. Example:
  ```python
  pdf1_path = "E:/PDFmuTutorial/large1.pdf"
  pdf2_path = "E:/PDFmuTutorial/large2.pdf"
  ```
- **Run the Script**:
  ```bash
  & E:/PDFmuTutorial/.venv/Scripts/python.exe E:/PDFmuTutorial/ollama_pdf_similarity_v3.py
  ```
- **Example Output**:
  ```
  Extracting text from PDFs...
  Computing Jaccard Similarity...
  Generating embeddings with phi:latest...
  Jaccard Similarity: 1.000
  Cosine Similarity (Ollama embeddings): 1.000
  ```
- **Understanding the Output**:
  - **Jaccard Similarity**: Measures similarity based on the overlap of tokenized words (0.0 to 1.0, where 1.0 means identical).
  - **Cosine Similarity**: Measures similarity between text embeddings generated by `phi:latest` (0.0 to 1.0, where 1.0 means identical).
  - The script truncates text to 10,000 characters per PDF to manage memory for large files (adjustable via `max_chars`).

## Configuration
You can customize `ollama_pdf_similarity_v3.py` by modifying parameters in the `main` function:
- **`model`**: Change the Ollama model (default: `phi:latest`). Example: `model="llama2:7b"` (if pulled).
- **`max_chars`**: Adjust the maximum characters processed for embeddings (default: `10000`). Lower this for very large PDFs to reduce memory usage.

To use a different model:
1. Pull the model (e.g., `ollama pull llama2:7b`).
2. Update the `model` parameter in the script:
   ```python
   main(pdf1_path, pdf2_path, model="llama2:7b", max_chars=10000)
   ```

For `createpdf.py`, check the script for customizable parameters (e.g., page count, text content) and modify as needed for your test cases.

## Troubleshooting
- **Error: `model "phi:latest" not found`**:
  - Ensure the model is pulled: `ollama pull phi:latest`.
  - Check available models: `ollama list`.
- **Error: Ollama server not running**:
  - Start the server: `ollama serve`.
- **Memory issues with large PDFs**:
  - Reduce `max_chars` in `ollama_pdf_similarity_v3.py` (e.g., `max_chars=5000`).
  - Use a lighter model like `phi:latest` instead of larger models like `llama3`.
- **PyMuPDF errors**:
  - Ensure `pymupdf==1.24.7` and `PyMuPDFb==1.24.6` are installed correctly.
  - Verify PDF paths are correct and accessible.
- **Issues with `createpdf.py`**:
  - Check the script for specific dependencies or configuration requirements.
  - Ensure write permissions in `E:\PDFmuTutorial` for saving PDFs.

## Deployment to GitHub
To deploy this project to your company’s GitHub repository:
1. Create a `requirements.txt` for easy dependency installation:
   ```
   pymupdf==1.24.7
   PyMuPDFb==1.24.6
   numpy
   ollama
   ```
2. Push the repository to GitHub:
   ```bash
   git add .
   git commit -m "Add PDF similarity and test PDF generation scripts"
   git push origin main
   ```
3. Add a GitHub Actions workflow for automated testing (example):
   ```yaml
   name: Test PDF Similarity
   on: [push]
   jobs:
     test:
       runs-on: ubuntu-latest
       steps:
       - uses: actions/checkout@v3
       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
       - name: Install dependencies
         run: pip install -r requirements.txt
       - name: Install Ollama
         run: |
           curl -fsSL https://ollama.com/install.sh | sh
           ollama serve &
           ollama pull phi:latest
       - name: Generate test PDFs
         run: python createpdf.py
       - name: Run similarity comparison
         run: python ollama_pdf_similarity_v3.py
   ```

## Notes
- The scripts are optimized for large PDFs (300–400+ pages) with text truncation in `ollama_pdf_similarity_v3.py` to prevent memory issues.
- Use `createpdf.py` to generate test PDFs with varying content or page counts to validate similarity scores.
- For non-identical PDFs, results may vary; test with diverse PDFs to ensure robustness.
- Contact your administrator for help with Ollama installation or server setup in a corporate environment.

## License
This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.